// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String?  @unique
  phone     String   @unique
  name      String
  role      UserRole @default(CUSTOMER)
  isVerified Boolean @default(false)
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  orders    Order[]
  
  @@map("users")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  image       String
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  meals       Meal[]
  
  @@map("categories")
}

model Meal {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  image       String
  isActive    Boolean  @default(true)
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  ingredients MealIngredient[]
  orderItems  OrderItem[]
  
  @@map("meals")
}

model Ingredient {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  price       Float    @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  mealIngredients MealIngredient[]
  orderItemIngredients OrderItemIngredient[]
  
  @@map("ingredients")
}

model MealIngredient {
  id           String  @id @default(cuid())
  mealId       String
  ingredientId String
  isOptional   Boolean @default(false)
  isDefault    Boolean @default(false)
  
  meal         Meal       @relation(fields: [mealId], references: [id], onDelete: Cascade)
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  
  @@unique([mealId, ingredientId])
  @@map("meal_ingredients")
}

model Order {
  id                    String        @id @default(cuid())
  userId                String
  totalAmount           Float
  status                OrderStatus   @default(PENDING)
  orderType             OrderType
  paymentMethod         PaymentMethod
  paymentStatus         PaymentStatus @default(PENDING)
  deliveryAddress       String?
  phoneNumber           String
  specialInstructions   String?
  estimatedDeliveryTime DateTime?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  
  user                  User          @relation(fields: [userId], references: [id])
  items                 OrderItem[]
  
  @@map("orders")
}

model OrderItem {
  id                  String  @id @default(cuid())
  orderId             String
  mealId              String
  quantity            Int
  price               Float
  specialInstructions String?
  
  order               Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  meal                Meal    @relation(fields: [mealId], references: [id])
  selectedIngredients OrderItemIngredient[]
  
  @@map("order_items")
}

model OrderItemIngredient {
  id           String @id @default(cuid())
  orderItemId  String
  ingredientId String
  
  orderItem    OrderItem  @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  
  @@unique([orderItemId, ingredientId])
  @@map("order_item_ingredients")
}

enum UserRole {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

enum OrderType {
  DELIVERY
  DINE_IN
  TAKE_AWAY
}

enum PaymentMethod {
  CASH
  CARD
  MOBILE_MONEY
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}
